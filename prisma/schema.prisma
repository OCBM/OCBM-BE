// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       String         @id @default(uuid()) @db.Uuid
  userName     String         @unique
  employeeId   String         @unique
  name         String?
  position     String?
  role         String?
  password     String?
  email        String         @unique
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  groups       Group[]        @relation("UserToGroup")
  organization Organization[] @relation("UserToOrganization")
  plants       Plant[]        @relation("UserToPlant")
}

model Group {
  groupId   String    @id @default(uuid()) @db.Uuid
  groupName String    @unique
  services  Service[]
  users     User[]    @relation("UserToGroup")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  serviceId   String   @id @default(uuid()) @db.Uuid
  serviceName String
  permissions String[]
  groupId     String   @db.Uuid
  group       Group    @relation(fields: [groupId], references: [groupId])
}

model Organization {
  organizationId   String    @id @default(uuid()) @db.Uuid
  organizationName String
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  users            User[]    @relation("UserToOrganization")
  plants           Plant[]
}

model Plant {
  plantId        String       @id @default(uuid()) @db.Uuid
  image          String
  imageKey       String       @unique @default("")
  imageName      String
  plantName      String
  description    String
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @updatedAt
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [organizationId])
  shops          Shop[]
  users          User[]       @relation("UserToPlant")
}

model Shop {
  shopId       String        @id @default(uuid()) @db.Uuid
  shopName     String
  image        String
  imageKey     String        @unique @default("")
  imageName    String
  description  String
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  plantId      String        @db.Uuid
  plant        Plant         @relation(fields: [plantId], references: [plantId])
  machineLines MachineLine[]
}

model MachineLine {
  machineLineId          String    @id @default(uuid()) @db.Uuid
  machineLineName        String
  machineLineDescription String
  image                  String
  imageKey               String    @unique @default("")
  imageName              String
  createdAt              DateTime? @default(now())
  updatedAt              DateTime? @updatedAt
  shopId                 String    @db.Uuid
  shop                   Shop      @relation(fields: [shopId], references: [shopId])
  machines               Machine[]
}

model Machine {
  machineId          String      @id @default(uuid()) @db.Uuid
  machineName        String
  machineDescription String
  machineNumber      String      @default("")
  image              String
  imageKey           String      @unique @default("")
  imageName          String
  createdAt          DateTime?   @default(now())
  updatedAt          DateTime?   @updatedAt
  machineLineId      String      @db.Uuid
  machineLine        MachineLine @relation(fields: [machineLineId], references: [machineLineId])
  elements           Element[]
}

model Element {
  elementId          String    @id @default(uuid()) @db.Uuid
  elementName        String
  elementDescription String
  image              String
  imageKey           String    @unique @default("")
  imageName          String
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  machineId          String    @db.Uuid
  machines           Machine   @relation(fields: [machineId], references: [machineId])
  sensors            Sensor[]
}

model Sensor {
  sensor_Id         String    @id @default(uuid()) @db.Uuid
  sensorId          String    
  sensorDescription String
  sensorLabel       String
  image             String
  imageKey          String    @unique @default("")
  imageName         String
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  elementId         String    @db.Uuid
  elements          Element   @relation(fields: [elementId], references: [elementId])
}
